# Quick Start - FlyonUI

h3:
  - FlyonUI

p:
  - getting-started

p:
  - Quickly get started with FlyonUI and unleash its powerful features in just minutes.

p:
  - FlyonUI brings together the beauty ofsemantic classesand the interactiveheadless JavaScript plugins, offering you a powerful toolkit to build stunning, interactive user interfaces with ease.

h2:
  - Getting Started

p:
  - This guide will walk you through getting started with FlyonUI. Youâll learn how to set it up, customize it, keep it updated, and integrate it into your project!

p:
  - Make sure that you haveNode.jsandTailwind CSSinstalled.

p:
  - To start, add FlyonUI as a dependency to your project by running the following command:

p:
  - This will install FlyonUI and make it available for use in your project.

p:
  - Next, configure main CSS to use FlyonUI.

p:
  - This ensures that FlyonUI's styling is applied correctly throughout your project.

p:
  - If you want to include specific js component:

p:
  - For enabling interactive components such as accordion, dropdown, modal etc... , include FlyonUI's JavaScript in your HTML file, just before the closing</body>tag:

p:
  - For a single component, use the specific path:

h2:
  - Setup Icons

p:
  - FlyonUI utilizesTabler icons, which are available throughIconify.

p:
  - For detailed installation instructions, refer to the officialdocumentation, or follow the steps below to set it up.

p:
  - You can referIconspage for more info

p:
  - Install the pluginBegin by adding@iconify/tailwind4as a dev dependency:npm i -D @iconify/tailwind4

p:
  - Add Tabler iconsInstall the Tabler icon set by running:npm i -D @iconify-json/tabler

p:
  - Basic UsageTo include the icons, add the following line to your CSS file:@plugin"@iconify/tailwind4";Then, to use an icon in your HTML, add a dynamic class selector for the desired icon. For example:<spanclass="icon-[tabler--upload]"></span>

h2:
  - Why No CDN Support?

p:
  - FlyonUI does not provide CDN support due to the way its styles and components are dynamically generated and integrated with JavaScript. The FlyonUI library relies on generating the required styles based on the specific javascript components being used, which makes it challenging to deliver a static version via CDN for development environments. This dynamic nature means that during development, FlyonUI needs to have access to the tools that generate these styles on-demand, making CDN integration complex and impractical in most cases.

p:
  - Additionally, while CDNs are commonly used to host static resources like CSS and JS files, FlyonUI’s requirement for dynamic style generation tailored to JavaScript-driven components limits this approach. We suggests that users can still use CDNs for production environments where the generated styles are finalized and static, but not during development .

h2:
  - How do I import a single css component

p:
  - To import a single CSS component from a library, you can utilize theincludeconfiguration property. This allows you to selectively load only the components you need, reducing unnecessary styles and optimizing your project.

h2:
  - How do I import a single JavaScript component?

p:
  - To use a single JS component, letâs walk through the steps. In this example, weâll focus on the accordion component.

p:
  - Please note that not all JavaScript components have variants. You can refer to the class table in the documentation to check if a component offers variant options.

p:
  - Step 1: Import the JavaScript for the component

p:
  - To enable the interactive accordion component, include the FlyonUI JavaScript file for the accordion just before the closing</body>tag. This file contains all the necessary JavaScript for accordion.

p:
  - Step 2: Update main.css

p:
  - Add variants css for accordion and accordion.css.

h2:
  - Bundling FlyonUI with Webpack or Parcel

p:
  - To bundle FlyonUI into your project using a JavaScript bundler like Webpack or Parcel, follow these steps:

p:
  - Step 1: Import FlyonUI JavaScript

p:
  - In your main JavaScript file (e.g.,app-bundle.js), import FlyonUI:

p:
  - Step 2: Include the JavaScript in HTML

p:
  - For a single component, import the specific component:

p:
  - Step 3: Include the JavaScript in HTML

p:
  - Finally, ensure your bundled JavaScript file is included in your HTML:

p:
  - For more details on FlyonUI's JavaScript capabilities, check out the aJavaScript documentation.

h2:
  - Quick Start

h3:
  - On this page

h2:
  - Quick Start

p:
  - FlyonUI is an open-sourceTailwind CSS components librarywith UI examples, blocks, templates, plugins, and a Figma design system.

h3:
  - Innovative Offerings

p:
  - Discover other Tools & Brands in our Ecosystem

p:
  - Building in public by@Ajay Patel, designed by@Anand Patel
