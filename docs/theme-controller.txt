# Tailwind CSS Theme Controller - FlyonUI

h3:
  - FlyonUI

p:
  - components

p:
  - If a checkbox or radio input with the theme-controller class is present on the page, the page's theme will be set to the value of that input.

table:
| Class Name | Type | Description |
| --- | --- | --- |
| theme-controller | Component | For a checkbox or radio button input intended to toggle the page theme. |

p:
  - The Theme Controller changes the theme using only CSS. You can use JavaScript to save the input state to the server or localStorage if you want it to persist across page refreshes.

h2:
  - Basic example

h3:
  - Checkbox

p:
  - Use thetheme-controllercomponent class with a checkbox input to create a theme switcher that toggles between the default theme and the theme specified in the value.

Code:
<div :dir="isRtl ? 'rtl' : 'ltr'" class="overflow-hidden" id="previewFrame" x-ref="previewFrame">
 <div class="bg-base-200/20 border-neutral/10 rounded-box not-prose flex w-full flex-[1_0_0] flex-wrap gap-3 border p-3 sm:p-6">
  <input class="checkbox theme-controller" type="checkbox" value="dark"/>
 </div>
</div>

h3:
  - Switch

p:
  - Create a theme controller using a switch based on the example provided below.

Code:
<div :dir="isRtl ? 'rtl' : 'ltr'" class="overflow-hidden" id="previewFrame" x-ref="previewFrame">
 <div class="bg-base-200/20 border-neutral/10 rounded-box not-prose flex w-full flex-[1_0_0] flex-wrap gap-3 border p-3 sm:p-6">
  <input class="switch theme-controller" type="checkbox" value="dark"/>
 </div>
</div>

h2:
  - Illustrations

h3:
  - Using swap

p:
  - The example below shows how to implement a theme controller using a switch component.

Code:
<div :dir="isRtl ? 'rtl' : 'ltr'" class="overflow-hidden" id="previewFrame" x-ref="previewFrame">
 <div class="bg-base-200/20 border-neutral/10 rounded-box not-prose flex w-full flex-[1_0_0] flex-wrap gap-3 border p-3 sm:p-6">
  <label class="swap swap-rotate">
   <input class="theme-controller" type="checkbox" value="dark"/>
   <span class="swap-off icon-[tabler--sun] size-7">
   </span>
   <span class="swap-on icon-[tabler--moon] size-7">
   </span>
  </label>
 </div>
</div>

h3:
  - Using switch with text

p:
  - The example below illustrates how to create a theme controller using a switch combined with text.

Code:
<div :dir="isRtl ? 'rtl' : 'ltr'" class="overflow-hidden" id="previewFrame" x-ref="previewFrame">
 <div class="bg-base-200/20 border-neutral/10 rounded-box not-prose flex w-full flex-[1_0_0] flex-wrap gap-3 border p-3 sm:p-6">
  <label class="flex cursor-pointer gap-2">
   <span class="label-text">
    Light
   </span>
   <input class="switch theme-controller" type="checkbox" value="dark"/>
   <span class="label-text">
    Dark
   </span>
  </label>
 </div>
</div>

h3:
  - Using switch with icons inside

p:
  - The example provided shows how to build a theme controller using a switch that features icons.

Code:
<div :dir="isRtl ? 'rtl' : 'ltr'" class="overflow-hidden" id="previewFrame" x-ref="previewFrame">
 <div class="bg-base-200/20 border-neutral/10 rounded-box not-prose flex w-full flex-[1_0_0] flex-wrap gap-3 border p-3 sm:p-6">
  <label class="relative inline-block">
   <input aria-label="default switch with icon" checked="" class="switch switch-primary theme-controller peer" type="checkbox"/>
   <span class="icon-[tabler--sun] text-primary-content absolute start-1 top-1.5 hidden size-4 peer-checked:block">
   </span>
   <span class="icon-[tabler--moon] text-neutral-content absolute end-1 top-1.5 block size-4 peer-checked:hidden">
   </span>
  </label>
 </div>
</div>

h3:
  - Using a switch with custom colors

p:
  - The example below shows how to build a theme controller using a switch with personalized colors.

Code:
<div :dir="isRtl ? 'rtl' : 'ltr'" class="overflow-hidden" id="previewFrame" x-ref="previewFrame">
 <div class="bg-base-200/20 border-neutral/10 rounded-box not-prose flex w-full flex-[1_0_0] flex-wrap gap-3 border p-3 sm:p-6">
  <input class="switch theme-controller checked:text-[#e4b0f8] checked:border-[#9b59b6] checked:bg-[#9b59b6]" type="checkbox" value="dark"/>
 </div>
</div>

h3:
  - Using a radio input

p:
  - Create a theme controller using a radio input based on the example below.

Code:
<div :dir="isRtl ? 'rtl' : 'ltr'" class="overflow-hidden" id="previewFrame" x-ref="previewFrame">
 <div class="bg-base-200/20 border-neutral/10 rounded-box not-prose flex w-full flex-[1_0_0] flex-wrap gap-3 border p-3 sm:p-6">
  <div class="flex flex-col gap-1">
   <div>
    <div class="flex items-center justify-between gap-4">
     <label class="label-text" for="defaultTheme">
      Default
     </label>
     <input checked="" class="radio theme-controller" id="defaultTheme" name="theme-radios" type="radio" value="default"/>
    </div>
   </div>
   <div>
    <div class="flex items-center justify-between gap-4">
     <label class="label-text" for="corporateTheme">
      Corporate
     </label>
     <input class="radio theme-controller" id="corporateTheme" name="theme-radios" type="radio" value="corporate"/>
    </div>
   </div>
   <div>
    <div class="flex items-center justify-between gap-4">
     <label class="label-text" for="gourmentTheme">
      Gourmet
     </label>
     <input class="radio theme-controller" id="gourmentTheme" name="theme-radios" type="radio" value="gourmet"/>
    </div>
   </div>
  </div>
 </div>
</div>

h3:
  - Using a radio button

p:
  - The example below shows how to create a theme controller using a radio button.

Code:
<div :dir="isRtl ? 'rtl' : 'ltr'" class="overflow-hidden" id="previewFrame" x-ref="previewFrame">
 <div class="bg-base-200/20 border-neutral/10 rounded-box not-prose flex w-full flex-[1_0_0] flex-wrap gap-3 border p-3 sm:p-6">
  <div class="join drop-shadow join-vertical">
   <input aria-label="Default" checked="" class="btn btn-secondary theme-controller join-item" name="theme-buttons" type="radio" value="default"/>
   <input aria-label="Corporate" class="btn btn-secondary theme-controller join-item" name="theme-buttons" type="radio" value="corporate"/>
   <input aria-label="Gourmet" class="btn btn-secondary theme-controller join-item" name="theme-buttons" type="radio" value="gourmet"/>
  </div>
 </div>
</div>

h3:
  - Using a dropdown

p:
  - Hereâ€™s a ready-to-use example of a theme controller utilizing a dropdown menu.

Code:
<div :dir="isRtl ? 'rtl' : 'ltr'" class="overflow-hidden" id="previewFrame" x-ref="previewFrame">
 <div class="bg-base-200/20 border-neutral/10 rounded-box not-prose flex w-full flex-[1_0_0] flex-wrap gap-3 border p-3 sm:p-6">
  <div class="dropdown relative inline-flex [--auto-close:inside]">
   <button aria-expanded="false" aria-haspopup="menu" aria-label="Dropdown" class="dropdown-toggle btn btn-primary" id="dropdown-default" type="button">
    Dropdown
    <span class="icon-[tabler--chevron-down] dropdown-open:rotate-180 size-4">
    </span>
   </button>
   <ul aria-labelledby="dropdown-default" aria-orientation="vertical" class="dropdown-menu dropdown-open:opacity-100 hidden min-w-60" role="menu">
    <li>
     <input aria-label="Default" checked="" class="theme-controller btn btn-text w-full justify-start" name="theme-dropdown" type="radio" value="default"/>
    </li>
    <li>
     <input aria-label="Corporate" class="theme-controller btn btn-text w-full justify-start" name="theme-dropdown" type="radio" value="corporate"/>
    </li>
    <li>
     <input aria-label="Gourmet" class="theme-controller btn btn-text w-full justify-start" name="theme-dropdown" type="radio" value="gourmet"/>
    </li>
   </ul>
  </div>
 </div>
</div>

h2:
  - JavaScript Behavior

h3:
  - Saving Theme Preferences in Local Storage

h3:
  - Setup

p:
  - Below are the comprehensively outlined steps you can follow to seamlessly integratetheme-changeinto your project for efficient theme switching functionality with storing in local storage.

p:
  - Installtheme-changevia npm.

p:
  - To integrate theme-change, add the followingcodein yourjavascriptfile.

p:
  - Include the following<script>tag near the end of your</body>section:

p:
  - The below example showcase the toggle functionality using the switch component.

p:
  - Thetheme-changeplugin offers three primary attributes to manage themes dynamically:

p:
  - data-set-theme="luxury"Use this attribute to set the theme directly for components such as buttons, radio buttons, and dropdowns. The theme is applied upon user interaction (e.g., clicking a button).

p:
  - data-choose-themeThis attribute is designed forselectcomponents. It dynamically applies the theme based on the selected option from a dropdown menu.

p:
  - data-toggle-theme="soft"Ideal for toggle components like checkboxes and switches. This attribute allows users to switch between themes interactively by toggling the element.

p:
  - It also provides thedata-act-class="ACTIVECLASS"attribute, which applies the specifiedACTIVECLASSto the element when it is clicked or toggled.

p:
  - For a live demonstration and detailed example of using FlyonUI with thetheme-changeplugin, check out thisStackBlitz example.

h2:
  - Theme Controller

h3:
  - On this page

h2:
  - Theme Controller

p:
  - FlyonUI is an open-sourceTailwind CSS components librarywith UI examples, blocks, templates, plugins, and a Figma design system.

h3:
  - Innovative Offerings

p:
  - Discover other Tools & Brands in our Ecosystem

p:
  - Building in public by@Ajay Patel, designed by@Anand Patel
